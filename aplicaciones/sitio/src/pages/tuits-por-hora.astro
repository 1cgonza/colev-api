---
import Plantilla from '../plantillas/Plantilla.astro';
---

<Plantilla
  titulo=""
  descripcion="Proyectos de visualizaciÃ³n de datos para Colev desarrollados por el Laboratorio EnFlujo."
  imagen="https://colev.enflujo.com/imgs/colev-enflujo_og.webp"
>
  <main>
    <svg id="contenedor"></svg>
    <canvas id="lienzo"></canvas>
    <div id="filtros">
      <div id="todos" class="filtro seleccionado">Todos</div>
      <div id="tipos" class="filtro">Por tipos</div>
    </div>
  </main>
</Plantilla>

<script>
  import dayjs, { Dayjs, DayjsTimezone } from 'dayjs';
  import utc from 'dayjs/plugin/utc';
  import zonaHoraria from 'dayjs/plugin/timezone';
  import { convertirEscala } from '@enflujo/alquimia';
  import type { TuitsDatos, TuitsPorHora, TuitsTipos } from '../tipos';
  import {
    axisBottom,
    axisRight,
    max,
    scaleLinear,
    scaleOrdinal,
    scaleTime,
    select,
    zoom,
    zoomIdentity,
    ZoomTransform,
  } from 'd3';
  import type { Selection } from 'd3';

  const fuente = {
    todos: { maximo: 0, datos: [] },
    tipos: { maximo: 0, datos: [] },
    quoted: { maximo: 0, datos: [] },
    replied: { maximo: 0, datos: [] },
    original: { maximo: 0, datos: [] },
    retweeted: { maximo: 0, datos: [] },
  };
  const zona = 'America/Bogota';
  dayjs.extend(utc);
  dayjs.extend(zonaHoraria);

  const escalaMax = 500;
  const margen = { arriba: 20, der: 60, abajo: 50, izq: 30 };
  const dims = { ancho: 0, alto: 0, rangoY: margen.abajo };
  const dimsGrafica = { ancho: 0, alto: 0 };
  const duracion = 250;
  const svg = select('#contenedor');
  const lienzo: Selection<HTMLCanvasElement, unknown, HTMLElement, any> = select('#lienzo');
  const ctx = lienzo?.node()?.getContext('2d') as CanvasRenderingContext2D;
  const indicadorX = svg.append('g').attr('class', 'eje').attr('id', 'ejeX');
  const indicadorY = svg.append('g').attr('class', 'eje').attr('id', 'ejeY');
  const ejeX = scaleTime();
  const ejeY = scaleLinear();
  const lupa = zoom<HTMLCanvasElement, unknown>().scaleExtent([1, escalaMax]).on('zoom', escalar);

  const filtroTodos = document.getElementById('todos') as HTMLDivElement;
  const filtroTipos = document.getElementById('tipos') as HTMLDivElement;
  const filtros = document.getElementById('filtros');
  let tipo = 'todos';
  let fechaInicial: Dayjs;
  let fechaFinal: Dayjs;

  cargarDatos();

  function cambiarTipo(elemento: HTMLDivElement, tipoSeleccionado: TuitsTipos) {
    if (tipo === tipoSeleccionado) return;
    filtros?.querySelector('.seleccionado')?.classList.remove('seleccionado');
    elemento.classList.add('seleccionado');
    tipo = tipoSeleccionado;

    const { maximo } = fuente[tipoSeleccionado];
    actualizarEjeY(maximo);
    indicadorY.transition().duration(duracion).call(axisRight(ejeY));

    pintar(zoomIdentity);
  }

  filtroTodos.onclick = () => {
    cambiarTipo(filtroTodos, 'todos');
  };

  filtroTipos.onclick = () => {
    cambiarTipo(filtroTipos, 'tipos');
  };

  function procesarFechas(datos) {
    let dia = 0;
    const conTipo = datos[0].length === 4;

    return datos.map((d: [fecha: string, hora: number, cantidad: number]): TuitsPorHora => {
      const fecha = new Date(d[0]);
      fecha.setHours(d[1]);
      dia = d[1] === 0 ? dia + 1 : dia;

      if (!conTipo) {
        return [fecha, d[2], dia];
      } else {
        const tipo = d[3] ? d[3] : 'original';
        return [fecha, d[2], dia, tipo];
      }
    });
  }

  async function cargarDatos() {
    const servidorUrl = 'http://localhost:8080/tally';
    fuente.todos.datos = await fetch(`${servidorUrl}/tuits-por-hora`)
      .then((respuesta) => respuesta.json())
      .then(procesarFechas);

    fuente.todos.maximo = Math.max(...fuente.todos.datos.map((d: TuitsDatos) => d[1]));

    const datosTipos = await fetch(`${servidorUrl}/tuits-por-hora-tipo`)
      .then((respuesta) => respuesta.json())
      .then(procesarFechas);

    const quoted = datosTipos.filter((d) => d[3] === 'quoted');
    const replied = datosTipos.filter((d) => d[3] === 'replied_to');
    const retweeted = datosTipos.filter((d) => d[3] === 'retweeted');
    const original = datosTipos.filter((d) => d[3] === null);

    fuente.tipos.maximo = Math.max(...datosTipos.map((d: TuitsDatos) => d[1]));
    fuente.quoted.maximo = max(quoted, (d) => d[1]);
    fuente.replied.maximo = max(replied, (d) => d[1]);
    fuente.original.maximo = max(original, (d) => d[1]);
    fuente.retweeted.maximo = max(retweeted, (d) => d[1]);

    fuente.tipos.datos = datosTipos;
    fuente.quoted.datos = quoted;
    fuente.replied.datos = replied;
    fuente.original.datos = original;
    fuente.retweeted.datos = retweeted;

    fechaInicial = dayjs.tz(fuente.todos.datos[0][0], zona);
    fechaFinal = dayjs.tz(fuente.todos.datos[fuente.todos.datos.length - 1][0], zona);
    actualizarEjeX(fechaInicial.toDate(), fechaFinal.toDate());
    console.log(fuente);
    inicio();
  }

  function inicio() {
    const { maximo } = fuente[tipo];
    actualizarEjeY(maximo);
    actualizarDimensiones();
    lienzo.call(lupa);

    window.onresize = actualizarDimensiones;
  }

  function color(tipo: string, opacidad: number): string {
    const colores: { [color: string]: string } = {
      todos: `rgba(62, 255, 207, ${opacidad})`, // verde
      quoted: `rgba(255, 217, 114, ${opacidad})`, // amarillo
      replied_to: `rgba(137, 209, 248, ${opacidad})`, // azul
      original: `rgba(62, 255, 207, ${opacidad})`, // verde
    };

    return colores[tipo];
  }

  function pintar(transformacion: ZoomTransform) {
    ctx.clearRect(0, 0, dims.ancho, dims.alto);
    const escala = transformacion.k;
    const anchoMax = tipo === 'todos' ? 2 : 1;
    const ancho = convertirEscala(escala, 1, 100, 0.5, anchoMax);
    const opacidad = convertirEscala(escala, 1, 60, 0.3, 0.8);
    const centroX = ancho * 0.5;

    const { datos } = fuente[tipo];

    if (tipo === 'todos') {
      ctx.fillStyle = color('todos', opacidad);
      datos.forEach((punto) => {
        const xSinTransformacion = ejeX(punto[0]);
        const [x] = transformacion.apply([xSinTransformacion, 0]);
        const y = ejeY(punto[1]);

        ctx.fillRect(x - centroX, y, ancho, dimsGrafica.alto - y);
        if (escala > escalaMax / 4) {
          ctx.save();
          ctx.fillStyle = 'white';
          ctx.fillText(`${punto[1]}`, x - centroX, y - 5);
          ctx.restore();
        }
      });
    } else {
      const pasos = {
        original: 0,
        quoted: ancho * 1,
        replied_to: ancho * 2,
      };
      datos.forEach((punto) => {
        const pasoX = pasos[punto[3]];
        const xSinTransformacion = ejeX(punto[0]);
        const [x] = transformacion.apply([xSinTransformacion, 0]);
        const y = ejeY(punto[1]);
        ctx.fillStyle = color(punto[3], opacidad);
        // console.log(x, y);
        ctx.fillRect(x + pasoX, y, ancho, dimsGrafica.alto - y);

        if (escala > escalaMax / 4) {
          // ctx.save();
          // ctx.fillStyle = 'white';
          ctx.fillText(`${punto[1]}`, x + pasoX, y - 5);
          // ctx.restore();
        }
      });
    }
  }

  function escalar(evento) {
    indicadorX
      .transition()
      .duration(duracion)
      .call(axisBottom(evento.transform.rescaleX(ejeX)));

    pintar(evento.transform);
  }

  function actualizarDimensiones() {
    dims.ancho = window.innerWidth;
    dims.alto = window.innerHeight - 100;
    dimsGrafica.ancho = dims.ancho - margen.izq - margen.der;
    dimsGrafica.alto = dims.alto - margen.abajo - margen.arriba;
    svg.attr('width', dims.ancho).attr('height', dims.alto);

    lienzo
      .attr('width', dimsGrafica.ancho)
      .attr('height', dimsGrafica.alto)
      .attr('style', `left:${margen.izq}px; top:${margen.arriba}px;`);

    lupa.translateExtent([
      [0, 0],
      [dimsGrafica.ancho, dimsGrafica.alto],
    ]);

    ejeX.range([0, dimsGrafica.ancho]);
    ejeY.range([dimsGrafica.alto, 0]);

    indicadorY
      .attr('transform', `translate(${dims.ancho - margen.der},${margen.arriba})`)
      .transition()
      .duration(duracion)
      .call(axisRight(ejeY));

    indicadorX
      .attr('transform', `translate(${margen.izq},${dimsGrafica.alto + margen.arriba})`)
      .transition()
      .duration(duracion)
      .call(axisBottom(ejeX));

    pintar(zoomIdentity);
  }

  function actualizarEjeX(inicio: Date, fin: Date) {
    ejeX.domain([inicio, fin]);
  }

  function actualizarEjeY(max: number) {
    ejeY.domain([0, max]);
  }
</script>

<style lang="scss" is:global>
  $verde: #3effd0;
  $verdeO1: rgba(62, 255, 207, 1);
  $negro: #22181c;
  $morado: #5300ff;
  $rojo: #f45b69;
  $amarillo: rgb(255, 217, 114);
  $azul: rgb(137, 209, 248);
  $blanco: #f9f2f5;
  html {
    box-sizing: border-box;
    height: 100%;
  }

  *,
  *:before,
  *:after {
    box-sizing: inherit;
  }

  html,
  body {
    margin: 0;
    padding: 0;
  }

  html {
    background-color: $negro;
    color: $blanco;
    font-family: 'Courier New', 'Lucida Sans Typewriter', 'Lucida Typewriter', monospace;
  }

  ::selection {
    background-color: #9cadac9a;
    color: #e2e2e2;
  }

  #contenedor {
    position: absolute;
    pointer-events: none;
  }

  #lienzo {
    position: absolute;
  }

  #filtros {
    display: flex;
    z-index: 9;
    position: absolute;
    bottom: 20px;
    width: 100vw;
    justify-content: center;
    .filtro {
      border: 1px solid $verde;
      padding: 0.5em;
      margin-right: 0.5em;
      cursor: pointer;

      &.seleccionado {
        background-color: rgba($verde, 0.3);
      }
    }
  }
</style>
